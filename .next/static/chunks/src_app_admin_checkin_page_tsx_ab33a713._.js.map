{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/wgabrielsc/Documents/GitHub/lead-sus-vol/src/app/admin/checkin/page.tsx"],"sourcesContent":["\"use client\";\n\nimport * as React from \"react\";\nimport Image from \"next/image\";\n// REMOVEMOS: useSession e useRouter, pois não são mais necessários para a verificação\nimport { toast } from \"sonner\";\nimport { z } from \"zod\";\n\nimport { IconSearch, IconUserCheck, IconClockHour4 } from \"@tabler/icons-react\";\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  // ... resto dos seus imports do TanStack Table ...\n  SortingState, \n  HeaderGroup,\n  Row,\n  Cell,\n  Header,\n} from \"@tanstack/react-table\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from \"@/components/ui/table\";\n\n// O hook de dados e o schema permanecem os mesmos\nconst leadCheckinSchema = z.object({\n  id: z.number(),\n  nome: z.string(),\n  whatsapp: z.string(),\n  dataCheckin: z.string().nullable(),\n});\n\ntype Lead = z.infer<typeof leadCheckinSchema>;\n\nfunction useLeadsData() {\n  const [data, setData] = React.useState<Lead[]>([]);\n  const [loading, setLoading] = React.useState(true);\n\n  const fetchData = React.useCallback(() => {\n    setLoading(true);\n    fetch(\"/api/leads\")\n      .then(res => res.json())\n      .then(json => setData(z.array(leadCheckinSchema).parse(json)))\n      .catch(() => toast.error(\"Falha ao carregar lista.\"))\n      .finally(() => setLoading(false));\n  }, []);\n\n  React.useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return { data, loading, refetch: fetchData };\n}\n\n\n// O nome do componente foi alterado para refletir que ele é um componente de cliente\nexport default function CheckinClientPage() {\n  // REMOVEMOS a lógica de verificação com useSession e useEffect daqui\n  const { data, loading, refetch } = useLeadsData();\n  const [sorting, setSorting] = React.useState<SortingState>([]);\n  const [globalFilter, setGlobalFilter] = React.useState('');\n\n  const handleCheckin = async (id: number) => {\n    // ... a função handleCheckin continua a mesma\n  };\n\n  const columns = React.useMemo<ColumnDef<Lead>[]>(() => [\n    // ... as definições de colunas continuam as mesmas\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    // ... a definição da tabela continua a mesma\n  });\n  \n  // A lógica de carregamento agora é mais simples\n  if (loading) {\n    return <div className=\"flex items-center justify-center min-h-screen bg-gray-900 text-white\">Carregando dados...</div>;\n  }\n  \n  // O JSX da página é retornado diretamente, pois a verificação já foi feita no servidor\n  return (\n    <main className=\"min-h-screen bg-gray-900 text-gray-200 flex flex-col items-center justify-center p-4 sm:p-6 md:p-8\">\n      {/* Todo o seu JSX da tabela e da busca permanece aqui */}\n    </main>\n  );\n}"],"names":[],"mappings":";;;;AAEA;AAEA,sFAAsF;AACtF;AACA;;;AANA;;;;AAwBA,kDAAkD;AAClD,MAAM,oBAAoB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjC,IAAI,uIAAA,CAAA,IAAC,CAAC,MAAM;IACZ,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM;IACd,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM;IAClB,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAClC;AAIA,SAAS;;IACP,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAU,EAAE;IACjD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAE;IAE7C,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,cAAiB,AAAD;+CAAE;YAClC,WAAW;YACX,MAAM,cACH,IAAI;uDAAC,CAAA,MAAO,IAAI,IAAI;sDACpB,IAAI;uDAAC,CAAA,OAAQ,QAAQ,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,mBAAmB,KAAK,CAAC;sDACtD,KAAK;uDAAC,IAAM,2IAAA,CAAA,QAAK,CAAC,KAAK,CAAC;sDACxB,OAAO;uDAAC,IAAM,WAAW;;QAC9B;8CAAG,EAAE;IAEL,CAAA,GAAA,6JAAA,CAAA,YAAe,AAAD;kCAAE;YACd;QACF;iCAAG;QAAC;KAAU;IAEd,OAAO;QAAE;QAAM;QAAS,SAAS;IAAU;AAC7C;GAlBS;AAsBM,SAAS;;IACtB,qEAAqE;IACrE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG;IACnC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAgB,EAAE;IAC7D,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAE;IAEvD,MAAM,gBAAgB,OAAO;IAC3B,8CAA8C;IAChD;IAEA,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,UAAa,AAAD;8CAAqB,IAAM,EAEtD;6CAAE,EAAE;IAEL,MAAM,QAAQ,cAAc;QAC1B;QACA;IAEF;IAEA,gDAAgD;IAChD,IAAI,SAAS;QACX,qBAAO,6LAAC;YAAI,WAAU;sBAAuE;;;;;;IAC/F;IAEA,uFAAuF;IACvF,qBACE,6LAAC;QAAK,WAAU;;;;;;AAIpB;IA/BwB;;QAEa;;;KAFb","debugId":null}}]
}