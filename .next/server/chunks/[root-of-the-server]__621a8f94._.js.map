{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///Users/wgabrielsc/Documents/GitHub/lead-sus-vol/src/app/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///Users/wgabrielsc/Documents/GitHub/lead-sus-vol/src/app/api/leads/%5Bid%5D/checkin/route.ts"],"sourcesContent":["// src/app/api/leads/[id]/checkin/route.ts\nimport { getServerSession } from \"next-auth\";\nimport { authOptions } from '@/app/lib2/auth';\nimport { redirect } from \"next/navigation\";\nimport { NextResponse } from \"next/server\";\nimport { prisma } from \"@/app/lib/prisma\";\n\n// Função para lidar com a requisição de check-in\nexport async function PATCH(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const id = parseInt(params.id, 10);\n    if (isNaN(id)) {\n      return NextResponse.json({ message: \"ID inválido.\" }, { status: 400 });\n    }\n\n    // Atualiza o lead no banco de dados, definindo a data de check-in\n    const updatedLead = await prisma.lead.update({\n      where: { id },\n      data: {\n        dataCheckin: new Date(), // Define a data e hora atuais\n      },\n    });\n\n    return NextResponse.json(updatedLead, { status: 200 });\n\n  } catch (error: any) {\n    console.error(\"Erro ao fazer check-in:\", error);\n    if (error.code === 'P2025') {\n      return NextResponse.json({ message: \"Lead não encontrado.\" }, { status: 404 });\n    }\n    return NextResponse.json(\n      { message: \"Erro interno do servidor.\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"AAAA,0CAA0C;;;;AAI1C;AACA;;;AAGO,eAAe,MACpB,OAAgB,EAChB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,MAAM,KAAK,SAAS,OAAO,EAAE,EAAE;QAC/B,IAAI,MAAM,KAAK;YACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,kEAAkE;QAClE,MAAM,cAAc,MAAM,6HAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YAC3C,OAAO;gBAAE;YAAG;YACZ,MAAM;gBACJ,aAAa,IAAI;YACnB;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,aAAa;YAAE,QAAQ;QAAI;IAEtD,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,2BAA2B;QACzC,IAAI,MAAM,IAAI,KAAK,SAAS;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAuB,GAAG;gBAAE,QAAQ;YAAI;QAC9E;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAA4B,GACvC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}