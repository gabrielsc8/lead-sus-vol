{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///Users/wgabrielsc/Documents/GitHub/lead-sus-vol/src/app/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///Users/wgabrielsc/Documents/GitHub/lead-sus-vol/src/app/api/leads/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { prisma } from \"@/app/lib/prisma\";\n\n// --- FUNÇÃO PARA CRIAR UM NOVO LEAD (POST) ---\nexport async function POST(request: Request) {\n  try {\n    const data = await request.json();\n\n    // Validação dos campos obrigatórios\n    if (!data.nome || !data.whatsapp) {\n      return NextResponse.json(\n        { message: \"Nome e WhatsApp são obrigatórios.\" },\n        { status: 400 }\n      );\n    }\n\n    const lead = await prisma.lead.create({\n      data: {\n        nome: data.nome,\n        whatsapp: data.whatsapp,\n        sexo: data.sexo,\n        email: data.email || null, // Permite que o e-mail seja opcional\n        estado: data.estado,\n        cidade: data.cidade,\n        tipoVoluntario: data.tipoVoluntario,\n        ministerio: data.ministerio,\n        dataNascimento: data.dataNascimento ? new Date(data.dataNascimento) : null,\n      },\n    });\n\n    return NextResponse.json(lead, { status: 201 });\n\n  } catch (error) {\n    console.error(\"Erro ao salvar lead:\", error);\n    return NextResponse.json(\n      { message: \"Ocorreu um erro interno ao processar sua inscrição.\" },\n      { status: 500 }\n    );\n  }\n}\n\n\n// --- FUNÇÃO PARA LISTAR TODOS OS LEADS (GET) ---\n// (Esta função estava faltando, causando o erro 405)\nexport async function GET(request: Request) {\n  try {\n    const leads = await prisma.lead.findMany({\n      orderBy: {\n        createdAt: \"desc\",\n      },\n    });\n    return NextResponse.json(leads);\n  } catch (error) {\n    console.error(\"Erro ao buscar leads:\", error);\n    return NextResponse.json(\n      { message: \"Erro interno do servidor ao buscar leads.\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,oCAAoC;QACpC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,QAAQ,EAAE;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAoC,GAC/C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,OAAO,MAAM,6HAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpC,MAAM;gBACJ,MAAM,KAAK,IAAI;gBACf,UAAU,KAAK,QAAQ;gBACvB,MAAM,KAAK,IAAI;gBACf,OAAO,KAAK,KAAK,IAAI;gBACrB,QAAQ,KAAK,MAAM;gBACnB,QAAQ,KAAK,MAAM;gBACnB,gBAAgB,KAAK,cAAc;gBACnC,YAAY,KAAK,UAAU;gBAC3B,gBAAgB,KAAK,cAAc,GAAG,IAAI,KAAK,KAAK,cAAc,IAAI;YACxE;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,MAAM;YAAE,QAAQ;QAAI;IAE/C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAsD,GACjE;YAAE,QAAQ;QAAI;IAElB;AACF;AAKO,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,MAAM,QAAQ,MAAM,6HAAA,CAAA,SAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;YACvC,SAAS;gBACP,WAAW;YACb;QACF;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAA4C,GACvD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}