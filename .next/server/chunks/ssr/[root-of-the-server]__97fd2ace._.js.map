{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///Users/wgabrielsc/Documents/GitHub/lead-sus-vol/src/app/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 120, "column": 0}, "map": {"version":3,"sources":["file:///Users/wgabrielsc/Documents/GitHub/lead-sus-vol/src/app/lib2/auth.ts"],"sourcesContent":["import { type NextAuthOptions } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport { compare } from \"bcryptjs\";\nimport { prisma } from \"@/app/lib/prisma\";\nimport { JWT } from \"next-auth/jwt\";\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n    CredentialsProvider({\n      name: \"Credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"text\" },\n        password: { label: \"Senha\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        // 1. Busca o usuário pelo email\n        const user = await prisma.user.findUnique({\n          where: { email: credentials?.email },\n        });\n\n        // 2. VERIFICAÇÃO CORRIGIDA\n        // Lista de cargos que podem tentar fazer login no painel\n        const allowedRoles = [\"SUPER_ADMIN\", \"CHECKIN_ADMIN\"];\n        if (!user || !user.role || !allowedRoles.includes(user.role)) {\n          console.error(\"Tentativa de login falhou: usuário não encontrado ou cargo não permitido.\");\n          return null;\n        }\n\n        // 3. Compara a senha (isso agora será executado corretamente)\n        const isValid = await compare(credentials!.password, user.password);\n        if (!isValid) {\n          console.error(`Senha incorreta para o usuário: ${credentials?.email}`);\n          return null;\n        }\n\n        // 4. Retorna o usuário se tudo estiver certo\n        console.log(`Login bem-sucedido para: ${user.email} com cargo ${user.role}`);\n        return {\n          id: user.id.toString(),\n          name: user.name,\n          email: user.email,\n          role: user.role,\n        };\n      },\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n    maxAge: 20 * 60, // 20 minutos\n  },\n  callbacks: {\n    async jwt({ token, user }: { token: JWT; user?: any }) {\n      if (user) {\n        token.role = user.role;\n        token.id = user.id;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (session.user) {\n        session.user.role = token.role as string;\n        session.user.id = token.id as string;\n      }\n      return session;\n    },\n  },\n\n  secret: process.env.NEXTAUTH_SECRET || 'DU923NDU9NWUSAONSD39USI',\n  pages: {\n    signIn: \"/login\",\n  },\n};"],"names":[],"mappings":";;;AACA;AACA;AACA;;;;AAGO,MAAM,cAA+B;IAC1C,WAAW;QACT,CAAA,GAAA,wJAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAO;gBACtC,UAAU;oBAAE,OAAO;oBAAS,MAAM;gBAAW;YAC/C;YACA,MAAM,WAAU,WAAW;gBACzB,gCAAgC;gBAChC,MAAM,OAAO,MAAM,2HAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBAAE,OAAO,aAAa;oBAAM;gBACrC;gBAEA,2BAA2B;gBAC3B,yDAAyD;gBACzD,MAAM,eAAe;oBAAC;oBAAe;iBAAgB;gBACrD,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,IAAI,CAAC,aAAa,QAAQ,CAAC,KAAK,IAAI,GAAG;oBAC5D,QAAQ,KAAK,CAAC;oBACd,OAAO;gBACT;gBAEA,8DAA8D;gBAC9D,MAAM,UAAU,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD,EAAE,YAAa,QAAQ,EAAE,KAAK,QAAQ;gBAClE,IAAI,CAAC,SAAS;oBACZ,QAAQ,KAAK,CAAC,CAAC,gCAAgC,EAAE,aAAa,OAAO;oBACrE,OAAO;gBACT;gBAEA,6CAA6C;gBAC7C,QAAQ,GAAG,CAAC,CAAC,yBAAyB,EAAE,KAAK,KAAK,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;gBAC3E,OAAO;oBACL,IAAI,KAAK,EAAE,CAAC,QAAQ;oBACpB,MAAM,KAAK,IAAI;oBACf,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;gBACjB;YACF;QACF;KACD;IACD,SAAS;QACP,UAAU;QACV,QAAQ,KAAK;IACf;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAA8B;YACnD,IAAI,MAAM;gBACR,MAAM,IAAI,GAAG,KAAK,IAAI;gBACtB,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;gBAC9B,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC5B;YACA,OAAO;QACT;IACF;IAEA,QAAQ,QAAQ,GAAG,CAAC,eAAe,IAAI;IACvC,OAAO;QACL,QAAQ;IACV;AACF","debugId":null}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":["file:///Users/wgabrielsc/Documents/GitHub/lead-sus-vol/src/components/CheckinClientPage.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/CheckinClientPage.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/CheckinClientPage.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAwS,GACrU,sEACA","debugId":null}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":["file:///Users/wgabrielsc/Documents/GitHub/lead-sus-vol/src/components/CheckinClientPage.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/CheckinClientPage.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/CheckinClientPage.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 246, "column": 0}, "map": {"version":3,"sources":["file:///Users/wgabrielsc/Documents/GitHub/lead-sus-vol/src/app/admin/checkin/page.tsx"],"sourcesContent":["import { getServerSession } from \"next-auth\";\nimport { redirect } from \"next/navigation\";\nimport { authOptions } from \"@/app/lib2/auth\"; // Verifique se o caminho para suas authOptions está correto\n\n// Importa o componente de cliente que contém a tabela\nimport CheckinClientPage from \"@/components/CheckinClientPage\";\n\nexport default async function AdminCheckinPage() {\n  const session = await getServerSession(authOptions);\n\n  // Array com as roles permitidas para esta página\n  const allowedRoles = [\"SUPER_ADMIN\", \"CHECKIN_ADMIN\"];\n\n  // LÓGICA DE ACESSO: Redireciona se não houver sessão ou se a role não estiver na lista de permitidas\n  if (!session || !allowedRoles.includes(session.user?.role)) {\n    return redirect(\"/login\");\n  }\n\n  // Se a verificação passar, renderize o conteúdo da página\n  return <CheckinClientPage />;\n}"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;AACA,mNAA+C,4DAA4D;AAE3G,sDAAsD;AACtD;;;;;;AAEe,eAAe;IAC5B,MAAM,UAAU,MAAM,CAAA,GAAA,qIAAA,CAAA,mBAAgB,AAAD,EAAE,0HAAA,CAAA,cAAW;IAElD,iDAAiD;IACjD,MAAM,eAAe;QAAC;QAAe;KAAgB;IAErD,qGAAqG;IACrG,IAAI,CAAC,WAAW,CAAC,aAAa,QAAQ,CAAC,QAAQ,IAAI,EAAE,OAAO;QAC1D,OAAO,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;IAClB;IAEA,0DAA0D;IAC1D,qBAAO,8OAAC,uIAAA,CAAA,UAAiB;;;;;AAC3B","debugId":null}}]
}