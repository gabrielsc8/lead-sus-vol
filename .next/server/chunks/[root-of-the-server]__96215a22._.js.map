{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///Users/wgabrielsc/Documents/GitHub/lead-sus-vol/src/app/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["file:///Users/wgabrielsc/Documents/GitHub/lead-sus-vol/src/app/api/admins/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport bcrypt from 'bcryptjs';\n// Corrigi o import do Prisma para o caminho que você usou no schema\nimport { prisma } from '@/app/lib/prisma'; \n\n// POST /api/admins  ────────────────────────────────────────────────\nexport async function POST(req: NextRequest) {\n  try {\n    const { name, email, password, role } = await req.json();\n\n    if (!name || !email || !password || !role) {\n      return NextResponse.json(\n        { error: 'Todos os campos, incluindo o cargo, são obrigatórios.' },\n        { status: 422 } // Unprocessable Entity\n      );\n    }\n    \n    const allowedRoles = ['SUPER_ADMIN', 'CHECKIN_ADMIN'];\n    if (!allowedRoles.includes(role)) {\n        return NextResponse.json(\n            { error: 'Cargo inválido.' },\n            { status: 400 } // Bad Request\n        );\n    }\n\n    // Checar duplicidade de e-mail\n    const exists = await prisma.user.findUnique({ where: { email } });\n    if (exists) {\n      return NextResponse.json(\n        { error: 'E-mail já cadastrado.' },\n        { status: 409 } // Conflict\n      );\n    }\n\n    // Hashear a senha\n    const hashed = await bcrypt.hash(password, 12);\n\n    // 3. Criar o usuário com o cargo (role) vindo diretamente da requisição\n    await prisma.user.create({\n      data: {\n        name,\n        email,\n        password: hashed,\n        role: role, // Usa o cargo enviado pelo formulário\n      },\n    });\n\n    return NextResponse.json({ message: 'Administrador criado com sucesso!' }, { status: 201 });\n  } catch (err) {\n    console.error(\"ERRO NA API /api/admins:\", err);\n    return NextResponse.json(\n      { error: 'Erro interno do servidor.' },\n      { status: 500 }\n    );\n  }\n}\n\n// GET /api/admins  ────────────────────────────────────────────────\nexport async function GET() {\n  try {\n    // Esta função busca todos os tipos de admins, não apenas SUPER_ADMIN\n    const admins = await prisma.user.findMany({\n      where: {\n        OR: [\n          { role: 'SUPER_ADMIN' },\n          { role: 'CHECKIN_ADMIN' },\n        ],\n      },\n      select: { id: true, name: true, email: true, role: true, createdAt: true },\n    });\n    return NextResponse.json(admins);\n  } catch (err) {\n    console.error(\"ERRO NA API GET /api/admins:\", err);\n    return NextResponse.json(\n      { error: 'Erro interno do servidor.' },\n      { status: 500 }\n    );\n  }\n}\n\nexport const dynamic = 'force-dynamic';"],"names":[],"mappings":";;;;;AAAA;AACA;AACA,oEAAoE;AACpE;;;;AAGO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;QAEtD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM;YACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAwD,GACjE;gBAAE,QAAQ;YAAI,EAAE,uBAAuB;;QAE3C;QAEA,MAAM,eAAe;YAAC;YAAe;SAAgB;QACrD,IAAI,CAAC,aAAa,QAAQ,CAAC,OAAO;YAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO;YAAkB,GAC3B;gBAAE,QAAQ;YAAI,EAAE,cAAc;;QAEtC;QAEA,+BAA+B;QAC/B,MAAM,SAAS,MAAM,6HAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAAE,OAAO;gBAAE;YAAM;QAAE;QAC/D,IAAI,QAAQ;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAwB,GACjC;gBAAE,QAAQ;YAAI,EAAE,WAAW;;QAE/B;QAEA,kBAAkB;QAClB,MAAM,SAAS,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAE3C,wEAAwE;QACxE,MAAM,6HAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACvB,MAAM;gBACJ;gBACA;gBACA,UAAU;gBACV,MAAM;YACR;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAoC,GAAG;YAAE,QAAQ;QAAI;IAC3F,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4B,GACrC;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe;IACpB,IAAI;QACF,qEAAqE;QACrE,MAAM,SAAS,MAAM,6HAAA,CAAA,SAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;YACxC,OAAO;gBACL,IAAI;oBACF;wBAAE,MAAM;oBAAc;oBACtB;wBAAE,MAAM;oBAAgB;iBACzB;YACH;YACA,QAAQ;gBAAE,IAAI;gBAAM,MAAM;gBAAM,OAAO;gBAAM,MAAM;gBAAM,WAAW;YAAK;QAC3E;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4B,GACrC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,MAAM,UAAU","debugId":null}}]
}