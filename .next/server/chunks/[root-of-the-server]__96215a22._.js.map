{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///Users/wgabrielsc/Documents/GitHub/lead-sus-vol/src/app/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["file:///Users/wgabrielsc/Documents/GitHub/lead-sus-vol/src/app/api/admins/route.ts"],"sourcesContent":["// src/app/api/admins/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport bcrypt from 'bcryptjs';\nimport { prisma } from '@/app/lib/prisma';\n\n// POST /api/admins  ────────────────────────────────────────────────\nexport async function POST(req: NextRequest) {\n  try {\n    const { name, email, password, role } = await req.json();\n\n    // validações mínimas\n    if (!name || !email || !password) {\n      return NextResponse.json(\n        { error: 'Nome, e-mail e senha são obrigatórios.' },\n        { status: 422 }\n      );\n    }\n\n    // checar duplicidade\n    const exists = await prisma.user.findUnique({ where: { email } });\n    if (exists) {\n      return NextResponse.json(\n        { error: 'E-mail já cadastrado.' },\n        { status: 409 }\n      );\n    }\n\n    const hashed = await bcrypt.hash(password, 12);\n\n    await prisma.user.create({\n      data: {\n        name,\n        email,\n        password: hashed,\n        role: role ?? 'admin',\n      },\n    });\n\n    return NextResponse.json({ ok: true }, { status: 201 });\n  } catch (err) {\n    console.error(err);\n    return NextResponse.json(\n      { error: 'Erro interno.' },\n      { status: 500 }\n    );\n  }\n}\n\n// opcional: GET para listar (útil na dashboard)\nexport async function GET() {\n  const admins = await prisma.user.findMany({\n    where: { role: 'admin' },\n    select: { id: true, name: true, email: true, createdAt: true },\n  });\n  return NextResponse.json(admins);\n}\n\n// qualquer método diferente de GET/POST ⇒ 405\nexport const dynamic = 'force-dynamic'; // se precisar rodar em edge\n"],"names":[],"mappings":"AAAA,8BAA8B;;;;;;AAC9B;AACA;AACA;;;;AAGO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;QAEtD,qBAAqB;QACrB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyC,GAClD;gBAAE,QAAQ;YAAI;QAElB;QAEA,qBAAqB;QACrB,MAAM,SAAS,MAAM,6HAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAAE,OAAO;gBAAE;YAAM;QAAE;QAC/D,IAAI,QAAQ;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAwB,GACjC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,SAAS,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAE3C,MAAM,6HAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACvB,MAAM;gBACJ;gBACA;gBACA,UAAU;gBACV,MAAM,QAAQ;YAChB;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,IAAI;QAAK,GAAG;YAAE,QAAQ;QAAI;IACvD,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAgB,GACzB;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe;IACpB,MAAM,SAAS,MAAM,6HAAA,CAAA,SAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACxC,OAAO;YAAE,MAAM;QAAQ;QACvB,QAAQ;YAAE,IAAI;YAAM,MAAM;YAAM,OAAO;YAAM,WAAW;QAAK;IAC/D;IACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC3B;AAGO,MAAM,UAAU,iBAAiB,4BAA4B","debugId":null}}]
}